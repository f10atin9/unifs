/*
Package main GENERATED BY gengo:runtimedoc 
DON'T EDIT THIS FILE
*/
package main

// nolint:deadcode,unused
func runtimeDoc(v any, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		return c.RuntimeDoc(names...)
	}
	return nil, false
}

func (v CSIDriver) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Otel":
			return []string{}, true
		case "Driver":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Driver, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Serve CSIDriver",
	}, true
}

func (v Ftp) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Otel":
			return []string{}, true
		case "FileSystemBackend":
			return []string{}, true
		case "Server":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.FileSystemBackend, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.Server, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Serve Webdav as fuse fs",
	}, true
}

func (v Mount) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Otel":
			return []string{}, true
		case "Mounter":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Mounter, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Mount as fuse fs",
	}, true
}

func (v Mounter) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "MountPoint":
			return []string{}, true
		case "Backend":
			return []string{}, true
		case "Foreground":
			return []string{}, true
		case "Delegate":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v WebDAV) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Otel":
			return []string{}, true
		case "WebDAVServer":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.WebDAVServer, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Serve Webdav as fuse fs",
	}, true
}

func (v WebDAVServer) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Addr":
			return []string{}, true
		case "FileSystemBackend":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.FileSystemBackend, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}
